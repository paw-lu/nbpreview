â•­â”€ material â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚                                                       â”‚
â”‚  [3m"""Example syntax highlighting."""[0m                   â”‚
â”‚  [3mfrom[0m typing [3mimport[0m Iterator                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  class Math:                                          â”‚
â”‚      [3m"""An example class."""[0m                          â”‚
â”‚                                                       â”‚
â”‚      @staticmethod                                    â”‚
â”‚      def fib(n: int) -> Iterator[int]:                â”‚
â”‚          [3m"""Fibonacci series up to n."""[0m              â”‚
â”‚          a, b = 0, 1  [3m# Manually set first two terms[0m  â”‚
â”‚          while a < n:                                 â”‚
â”‚              yield a                                  â”‚
â”‚              a, b = b, a + b                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  result = sum(Math.fib(42))                           â”‚
â”‚  print(f"The answer is {result}")                     â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
â•­â”€ monokai â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚                                                       â”‚
â”‚  """Example syntax highlighting."""                   â”‚
â”‚  from typing import Iterator                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  class Math:                                          â”‚
â”‚      """An example class."""                          â”‚
â”‚                                                       â”‚
â”‚      @staticmethod                                    â”‚
â”‚      def fib(n: int) -> Iterator[int]:                â”‚
â”‚          """Fibonacci series up to n."""              â”‚
â”‚          a, b = 0, 1  # Manually set first two terms  â”‚
â”‚          while a < n:                                 â”‚
â”‚              yield a                                  â”‚
â”‚              a, b = b, a + b                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  result = sum(Math.fib(42))                           â”‚
â”‚  print(f"The answer is {result}")                     â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
â•­â”€ zenburn â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚                                                       â”‚
â”‚  """Example syntax highlighting."""                   â”‚
â”‚  from typing import Iterator                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  class Math:                                          â”‚
â”‚      """An example class."""                          â”‚
â”‚                                                       â”‚
â”‚      @staticmethod                                    â”‚
â”‚      def fib(n: int) -> Iterator[int]:                â”‚
â”‚          """Fibonacci series up to n."""              â”‚
â”‚          a, b = 0, 1  [3m# Manually set first two terms[0m  â”‚
â”‚          while a < n:                                 â”‚
â”‚              yield a                                  â”‚
â”‚              a, b = b, a + b                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  result = sum(Math.fib(42))                           â”‚
â”‚  print(f"The answer is [1m{[0mresult[1m}[0m")                     â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
â•­â”€ light / ansi_light â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚                                                       â”‚
â”‚  """Example syntax highlighting."""                   â”‚
â”‚  from [4mtyping[0m import Iterator                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  class [4mMath[0m:                                          â”‚
â”‚      """An example class."""                          â”‚
â”‚                                                       â”‚
â”‚      [1m@staticmethod[0m                                    â”‚
â”‚      def fib(n: int) -> Iterator[int]:                â”‚
â”‚          """Fibonacci series up to n."""              â”‚
â”‚          a, b = 0, 1  [2m# Manually set first two terms[0m  â”‚
â”‚          while a < n:                                 â”‚
â”‚              yield a                                  â”‚
â”‚              a, b = b, a + b                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  result = sum(Math.fib(42))                           â”‚
â”‚  print(f"The answer is {result}")                     â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
â•­â”€ dark / ansi_dark â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚                                                       â”‚
â”‚  """Example syntax highlighting."""                   â”‚
â”‚  from [4mtyping[0m import Iterator                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  class [4mMath[0m:                                          â”‚
â”‚      """An example class."""                          â”‚
â”‚                                                       â”‚
â”‚      [1m@staticmethod[0m                                    â”‚
â”‚      def fib(n: int) -> Iterator[int]:                â”‚
â”‚          """Fibonacci series up to n."""              â”‚
â”‚          a, b = 0, 1  [2m# Manually set first two terms[0m  â”‚
â”‚          while a < n:                                 â”‚
â”‚              yield a                                  â”‚
â”‚              a, b = b, a + b                          â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â”‚  result = sum(Math.fib(42))                           â”‚
â”‚  print(f"The answer is {result}")                     â”‚
â”‚                                                       â”‚
â”‚                                                       â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
